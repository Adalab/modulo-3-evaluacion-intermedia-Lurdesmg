{"ast":null,"code":"// Que esta función devuelva un valor por defecto es una cómoda manera de trabajar, así esta comprobación no la tenemos que hacer en App.js\nfunction get(variable, valorPorDefecto) {\n  if (localStorage.getItem(variable) === null) {\n    return valorPorDefecto;\n  } else {\n    return JSON.parse(localStorage.getItem(variable));\n  }\n}\n\n// Función que guarda una propiedad y su valor en el local storage\nfunction set(variable, valor) {\n  localStorage.setItem(variable, JSON.stringify(valor));\n}\n\n// Función que nos indica si una variable está ya guardada en el localStorage\nfunction includes(variable) {\n  return localStorage.getItem(variable) !== null;\n}\n\n// Función que nos indica si una variable NO está presente en el localStorage\nfunction notIncludes(variable) {\n  return localStorage.getItem(variable) === null;\n}\n\n// Función que borra una propiedad del local storage\nconst remove = key => {\n  localStorage.removeItem(key);\n};\n\n// Función que limpia todo el local storage\nconst clear = () => {\n  localStorage.clear();\n};\nconst ls = {\n  get,\n  set,\n  includes,\n  notIncludes,\n  remove,\n  clear\n};\n\n// Todo exportamos el obj para que pueda ser usado desde APP\nexport default ls;","map":{"version":3,"names":["get","variable","valorPorDefecto","localStorage","getItem","JSON","parse","set","valor","setItem","stringify","includes","notIncludes","remove","key","removeItem","clear","ls"],"sources":["/home/adalaber/Escritorio/Adalab/evaluacion-intermedia-React/modulo-3-evaluacion-intermedia-Lurdesmg/src/service/localStorage.js"],"sourcesContent":["// Que esta función devuelva un valor por defecto es una cómoda manera de trabajar, así esta comprobación no la tenemos que hacer en App.js\nfunction get(variable, valorPorDefecto) {\n    if( localStorage.getItem(variable) === null ) {\n      return valorPorDefecto;\n    }\n    else {\n      return JSON.parse(localStorage.getItem(variable));\n    }\n  }\n  \n  // Función que guarda una propiedad y su valor en el local storage\n  function set(variable, valor) {\n    localStorage.setItem(variable, JSON.stringify(valor));\n  }\n  \n  // Función que nos indica si una variable está ya guardada en el localStorage\n  function includes(variable) {\n    return localStorage.getItem(variable) !== null;\n  }\n  \n  // Función que nos indica si una variable NO está presente en el localStorage\n  function notIncludes(variable) {\n    return localStorage.getItem(variable) === null;\n  }\n  \n  // Función que borra una propiedad del local storage\n  const remove = (key) => {\n    localStorage.removeItem(key);\n  };\n  \n  // Función que limpia todo el local storage\n  const clear = () => {\n    localStorage.clear();\n  };\n  \n  const ls = {get, set, includes, notIncludes, remove, clear};\n\n// Todo exportamos el obj para que pueda ser usado desde APP\nexport default ls;"],"mappings":"AAAA;AACA,SAASA,GAAGA,CAACC,QAAQ,EAAEC,eAAe,EAAE;EACpC,IAAIC,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC,KAAK,IAAI,EAAG;IAC5C,OAAOC,eAAe;EACxB,CAAC,MACI;IACH,OAAOG,IAAI,CAACC,KAAK,CAACH,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC,CAAC;EACnD;AACF;;AAEA;AACA,SAASM,GAAGA,CAACN,QAAQ,EAAEO,KAAK,EAAE;EAC5BL,YAAY,CAACM,OAAO,CAACR,QAAQ,EAAEI,IAAI,CAACK,SAAS,CAACF,KAAK,CAAC,CAAC;AACvD;;AAEA;AACA,SAASG,QAAQA,CAACV,QAAQ,EAAE;EAC1B,OAAOE,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC,KAAK,IAAI;AAChD;;AAEA;AACA,SAASW,WAAWA,CAACX,QAAQ,EAAE;EAC7B,OAAOE,YAAY,CAACC,OAAO,CAACH,QAAQ,CAAC,KAAK,IAAI;AAChD;;AAEA;AACA,MAAMY,MAAM,GAAIC,GAAG,IAAK;EACtBX,YAAY,CAACY,UAAU,CAACD,GAAG,CAAC;AAC9B,CAAC;;AAED;AACA,MAAME,KAAK,GAAGA,CAAA,KAAM;EAClBb,YAAY,CAACa,KAAK,EAAE;AACtB,CAAC;AAED,MAAMC,EAAE,GAAG;EAACjB,GAAG;EAAEO,GAAG;EAAEI,QAAQ;EAAEC,WAAW;EAAEC,MAAM;EAAEG;AAAK,CAAC;;AAE7D;AACA,eAAeC,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}