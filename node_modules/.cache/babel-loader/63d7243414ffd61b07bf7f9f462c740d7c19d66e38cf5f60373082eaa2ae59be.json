{"ast":null,"code":"// fichero src/service/localStorage.js\n\n// Funcion que obtiene una propiedad del LS, si esta no existe porque es la primera vez que la usuaria entra en la pag, la funcion devuelve el valor de defaultValue\n// Que esta funcion devuelva un valor por defecto es una comoda manera de trabajr, asi esta comprobacion no la tenemos que hacer en App,js\nconst get = (key, defaultValue) => {\n  const localStorageData = localStorage.getItem(key);\n  if (localStorageData === null) {\n    return defaultValue;\n  } else {\n    return JSON.parse(localStorageData);\n  }\n};\n\n// Funcion que guarde una prop y su valor en el localStorage\nconst set = (key, value) => {\n  const localStorageData = JSON.stringify(value);\n  localStorage.setItem(key, localStorageData);\n};\n\n// funcion que borra una prop del localStorage\nconst remove = key => {\n  localStorage.removeItem(key);\n};\n\n// funcion que limpia todo el localStorage\nconst clear = () => {\n  localStorage.clear();\n};\n\n//Creamos un obj temporal, que es el que queremos exportar, este tiene: \n// ? - prop get cuyo valor es la funcion get \n// ? - prop set cuyo valor es la funcion set\n// ? - prop remove cuyo valor es la funcion remove\n// ? - prop clear cuyo valor es la funcion clear\n\nconst ls = {\n  get: get,\n  set: set,\n  remove: remove,\n  clear: clear\n};\n\n// Todo exportamos el obj para que pueda ser usado desde APP\nexport default ls;","map":{"version":3,"names":["get","key","defaultValue","localStorageData","localStorage","getItem","JSON","parse","set","value","stringify","setItem","remove","removeItem","clear","ls"],"sources":["/home/adalaber/Escritorio/Adalab/evaluacion-intermedia-React/modulo-3-evaluacion-intermedia-Lurdesmg/src/service/localStorage.js"],"sourcesContent":["// fichero src/service/localStorage.js\n\n// Funcion que obtiene una propiedad del LS, si esta no existe porque es la primera vez que la usuaria entra en la pag, la funcion devuelve el valor de defaultValue\n// Que esta funcion devuelva un valor por defecto es una comoda manera de trabajr, asi esta comprobacion no la tenemos que hacer en App,js\nconst get =(key, defaultValue) => {\n    const localStorageData = localStorage.getItem(key);\n    if (localStorageData === null) {\n        return defaultValue;\n    } else {\n        return JSON.parse(localStorageData);\n    }\n};\n\n// Funcion que guarde una prop y su valor en el localStorage\nconst set = (key , value) => {\n    const localStorageData = JSON.stringify(value);\n    localStorage.setItem(key, localStorageData);\n};\n\n// funcion que borra una prop del localStorage\nconst remove = (key) => {\n    localStorage.removeItem(key);\n};\n\n// funcion que limpia todo el localStorage\nconst clear = () => {\n    localStorage.clear();\n};\n\n//Creamos un obj temporal, que es el que queremos exportar, este tiene: \n// ? - prop get cuyo valor es la funcion get \n// ? - prop set cuyo valor es la funcion set\n// ? - prop remove cuyo valor es la funcion remove\n// ? - prop clear cuyo valor es la funcion clear\n\nconst ls = {\n    get: get,\n    set: set,\n    remove: remove,\n    clear: clear,\n};\n\n// Todo exportamos el obj para que pueda ser usado desde APP\nexport default ls;"],"mappings":"AAAA;;AAEA;AACA;AACA,MAAMA,GAAG,GAAEA,CAACC,GAAG,EAAEC,YAAY,KAAK;EAC9B,MAAMC,gBAAgB,GAAGC,YAAY,CAACC,OAAO,CAACJ,GAAG,CAAC;EAClD,IAAIE,gBAAgB,KAAK,IAAI,EAAE;IAC3B,OAAOD,YAAY;EACvB,CAAC,MAAM;IACH,OAAOI,IAAI,CAACC,KAAK,CAACJ,gBAAgB,CAAC;EACvC;AACJ,CAAC;;AAED;AACA,MAAMK,GAAG,GAAGA,CAACP,GAAG,EAAGQ,KAAK,KAAK;EACzB,MAAMN,gBAAgB,GAAGG,IAAI,CAACI,SAAS,CAACD,KAAK,CAAC;EAC9CL,YAAY,CAACO,OAAO,CAACV,GAAG,EAAEE,gBAAgB,CAAC;AAC/C,CAAC;;AAED;AACA,MAAMS,MAAM,GAAIX,GAAG,IAAK;EACpBG,YAAY,CAACS,UAAU,CAACZ,GAAG,CAAC;AAChC,CAAC;;AAED;AACA,MAAMa,KAAK,GAAGA,CAAA,KAAM;EAChBV,YAAY,CAACU,KAAK,EAAE;AACxB,CAAC;;AAED;AACA;AACA;AACA;AACA;;AAEA,MAAMC,EAAE,GAAG;EACPf,GAAG,EAAEA,GAAG;EACRQ,GAAG,EAAEA,GAAG;EACRI,MAAM,EAAEA,MAAM;EACdE,KAAK,EAAEA;AACX,CAAC;;AAED;AACA,eAAeC,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}